from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
                            QFileDialog, QMessageBox, QComboBox, QTableWidget,
                            QTableWidgetItem, QLabel, QTabWidget, QHeaderView, 
                            QTreeWidget, QTreeWidgetItem)
import psutil
from disk_info import DiskInfoCollector
from disk_analyzer import DiskAnalyzer

class DiskTab(QWidget):
    def __init__(self):
        super().__init__()
        self.info_collector = DiskInfoCollector()
        self.analyzer = DiskAnalyzer()
        self.canvas = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞
        self.init_ui()
    
    def init_ui(self):
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)

        # –î–µ—Ä–µ–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö
        self.tree_widget = QTreeWidget()
        self.tree_widget.setHeaderLabels(["Parameter", "Value"])
        self.tree_widget.header().setSectionResizeMode(0, QHeaderView.ResizeToContents)
        self.tree_widget.header().setSectionResizeMode(1, QHeaderView.Stretch)
        self.layout.addWidget(self.tree_widget)

        # –≠–ª–µ–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_layout = QVBoxLayout()
        
        # –í—ã–±–æ—Ä –¥–∏—Å–∫–∞
        self.disk_selector = QComboBox()
        self.update_disk_list()
        
        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        self.analyze_btn = QPushButton("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Å–∫")
        self.analyze_btn.clicked.connect(self.run_analysis)
        
        # –í–∫–ª–∞–¥–∫–∏ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
        self.tabs = QTabWidget()
        self.init_tables()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.recommendations_label = QLabel()
        self.recommendations_label.setWordWrap(True)
        self.recommendations_label.setStyleSheet("color: #d32f2f; font-weight: bold;")
        
        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.layout.addWidget(QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"))
        self.layout.addWidget(self.disk_selector)
        self.layout.addWidget(self.analyze_btn)
        self.layout.addWidget(self.tabs)
        self.layout.addWidget(self.recommendations_label)
        
        self.update_info()

    def init_tables(self):
        # –¢–∞–±–ª–∏—Ü–∞ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self.summary_table = self.create_table(
            ["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"], 
            QHeaderView.Stretch
        )
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –±–æ–ª—å—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
        self.large_files_table = self.create_table(
            ["–§–∞–π–ª", "–†–∞–∑–º–µ—Ä (GB)"], 
            QHeaderView.Stretch
        )
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å —Ç–∏–ø–∞–º–∏ —Ñ–∞–π–ª–æ–≤
        self.file_types_table = self.create_table(
            ["–¢–∏–ø —Ñ–∞–π–ª–∞", "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä (GB)"], 
            QHeaderView.Stretch
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabs.addTab(self.create_tab(self.summary_table, "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), "–û–±—â–∞—è")
        self.tabs.addTab(self.create_tab(self.large_files_table, "–ö—Ä—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã (>100MB)"), "–ö—Ä—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã")
        self.tabs.addTab(self.create_tab(self.file_types_table, "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤"), "–¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤")

    def create_table(self, headers, resize_mode):
        table = QTableWidget()
        table.setColumnCount(len(headers))
        table.setHorizontalHeaderLabels(headers)
        table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
        table.horizontalHeader().setSectionResizeMode(1, resize_mode)
        return table

    def create_tab(self, table, title):
        container = QWidget()
        layout = QVBoxLayout()
        layout.addWidget(QLabel(title))
        layout.addWidget(table)
        container.setLayout(layout)
        return container

    def update_disk_list(self):
        self.disk_selector.clear()
        for part in psutil.disk_partitions():
            self.disk_selector.addItem(part.mountpoint, part.device)
    
    def update_info(self):
        self.tree_widget.clear()
        info = self.info_collector.collect_all()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–¥–µ–ª–∞—Ö
        for partition in info['partitions']:
            part_item = QTreeWidgetItem(self.tree_widget)
            part_item.setText(0, f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {partition['device']}")
            part_item.setText(1, f"–¢–æ—á–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {partition['mountpoint']}")
            
            details = [
                ("–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞", partition['fstype']),
                ("–û–ø—Ü–∏–∏", partition['opts'])
            ]
            
            if 'error' in partition:
                details.append(("–û—à–∏–±–∫–∞", partition['error']))
            else:
                details.extend([
                    ("–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä", f"{self.format_size(partition['total'])} GB"),
                    ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ", f"{self.format_size(partition['used'])} GB ({partition['percent']}%)"),
                    ("–°–≤–æ–±–æ–¥–Ω–æ", f"{self.format_size(partition['free'])} GB")
                ])
            
            for name, value in details:
                child = QTreeWidgetItem(part_item)
                child.setText(0, name)
                child.setText(1, str(value))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–≤–æ–¥–µ-–≤—ã–≤–æ–¥–µ
        if info['io_counters']:
            io_item = QTreeWidgetItem(self.tree_widget)
            io_item.setText(0, "–û–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞")
            io_data = [
                ("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ", f"{self.format_size(info['io_counters']['read_bytes'])} GB"),
                ("–ó–∞–ø–∏—Å–∞–Ω–æ", f"{self.format_size(info['io_counters']['write_bytes'])} GB"),
                ("–û–ø–µ—Ä–∞—Ü–∏–π —á—Ç–µ–Ω–∏—è", str(info['io_counters']['read_count'])),
                ("–û–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏", str(info['io_counters']['write_count']))
            ]
            for name, value in io_data:
                child = QTreeWidgetItem(io_item)
                child.setText(0, name)
                child.setText(1, value)

    def run_analysis(self):
        mountpoint = self.disk_selector.currentText()
        try:
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ canvas
            if self.canvas:
                self.layout().removeWidget(self.canvas)
                self.canvas.deleteLater()
                self.canvas = None

            # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            analysis_data = self.analyzer.analyze_partition(mountpoint)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            self.update_summary_table(analysis_data['usage'])
            self.update_large_files_table(analysis_data['large_files'])
            self.update_file_types_table(analysis_data['file_types'])
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            self.show_recommendations(analysis_data['usage'], analysis_data)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def update_summary_table(self, usage):
        self.fill_table(self.summary_table, [
            ("–í—Å–µ–≥–æ –º–µ—Å—Ç–∞", self.format_size(usage['total'])),
            ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ", self.format_size(usage['used'])),
            ("–°–≤–æ–±–æ–¥–Ω–æ", self.format_size(usage['free'])),
            ("–ó–∞–ø–æ–ª–Ω–µ–Ω–æ", f"{usage['percent']}%")
        ])

    def update_large_files_table(self, files):
        data = [(path, self.format_size(size)) for path, size in files]
        self.fill_table(self.large_files_table, data)

    def update_file_types_table(self, file_types):
        data = [(ext, self.format_size(size)) for ext, size in file_types]
        self.fill_table(self.file_types_table, data)

    def fill_table(self, table, data):
        table.setRowCount(len(data))
        for row, items in enumerate(data):
            for col, value in enumerate(items):
                table.setItem(row, col, QTableWidgetItem(str(value)))

    def show_recommendations(self, usage, analysis):
        recommendations = []
        
        if usage['percent'] > 90:
            recommendations.append("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏—Å–∫–∞! –°—Ä–æ—á–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ.")
        elif usage['percent'] > 75:
            recommendations.append("‚ö†Ô∏è –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 75%. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞.")
        
        if len(analysis['large_files']) > 0:
            recommendations.append(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(analysis['large_files'])} –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (>100MB)")
        
        self.recommendations_label.setText("\n".join(recommendations) if recommendations else 
            "‚úÖ –ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –î–∏—Å–∫ –≤ –Ω–æ—Ä–º–µ.")

    @staticmethod
    def format_size(size_bytes):
        return f"{size_bytes / (1024**3):.2f} GB"